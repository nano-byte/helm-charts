{{- if eq .Values.rollout.controller "ArgoRollout" }}
apiVersion: argoproj.io/v1alpha1
kind: Rollout
{{- else }}
apiVersion: apps/v1
kind: {{ .Values.rollout.controller }}
{{- end }}

metadata:
  name: {{ include "generic-service.fullname" . }}
  labels: {{- include "generic-service.top-level-labels" . | nindent 4 }}
  annotations:
  {{- if .Values.tracing.enabled }}
    sidecar.jaegertracing.io/inject: {{ .Values.tracing.class | default "true" | quote }}
  {{- end }}
  {{- if .Values.annotations }}
    {{- .Values.annotations | toYaml | nindent 4 }}
  {{- end }}

spec:
  {{- if and (not .Values.autoscaling.enabled) (ne .Values.rollout.controller "DaemonSet") }}
  replicas: {{ .Values.replicas | int }}
  {{- end }}

  selector:
    matchLabels: {{- include "generic-service.selector-labels" . | nindent 6 }}

  strategy:
  {{- if eq .Values.rollout.strategy "RollingUpdate" }}
    {{- if eq .Values.rollout.controller "ArgoRollout" }}
      {{ fail "rollout.strategy cannot be RollingUpdate if rollout.controller is ArgoRollout, must be Canary or BlueGreen" }}
    {{- end }}
  {{- else if eq .Values.rollout.strategy "Recreate" }}
    {{- if or (eq .Values.rollout.controller "StatefulSet") (eq .Values.rollout.controller "DaemonSet") }}
      {{ fail "rollout.strategy cannot be Recreate if rollout.controller is StatefulSet or DaemonSet, use OnDelete instead" }}
    {{- end }}
    {{- if eq .Values.rollout.controller "ArgoRollout" }}
      {{ fail "rollout.strategy cannot be Recreate if rollout.controller is ArgoRollout, must be Canary or BlueGreen" }}
    {{- end }}
    type: Recreate
  {{- else if eq .Values.rollout.strategy "OnDelete" }}
    {{- if and (ne .Values.rollout.controller "StatefulSet") (ne .Values.rollout.controller "DaemonSet") }}
      {{ fail "rollout.strategy may only be OnDelete if rollout.controller is StatefulSet or DaemonSet" }}
    {{- end }}
    type: OnDelete
  {{- else if eq .Values.rollout.strategy "Canary" }}
    {{- if not .Values.ingress.enabled }}
      {{ fail "ingress.enabled must be true if rollout.strategy is Canary" }}
    {{- end }}
    {{- if not .Values.ingress.domains }}
      {{ fail "ingress.domains must not be empty if rollout.strategy is Canary" }}
    {{- end }}
    {{- if eq .Values.rollout.controller "ArgoRollout" }}
    canary:
      stableService: {{ include "generic-service.fullname" . }}
      stableMetadata:
        labels:
          role: stable
      canaryService: {{ include "generic-service.fullname" . }}-preview
      canaryMetadata:
        labels:
          role: preview
      analysis: {{- .Values.rollout.analysis | required "rollout.analysis is required if rollout.strategy is Canary" | toYaml |  nindent 8 }}
      trafficRouting:
        {{- if .Values.ingress.istio.enabled }}
        istio:
          virtualService:
            name: {{ include "generic-service.fullname" . }}
        {{- else if eq .Values.ingress.class "nginx" }}
        nginx:
          stableIngress: {{ include "generic-service.fullname" . }}
        {{- else }}
          {{ fail "Ingress must use Istio or nginx if rollout.strategy is Canary" }}
        {{- end }}
    {{- else if not .Values.rollout.flagger }}
      {{ fail "rollout.flagger must be true or rollout.controller must be ArgoRollout if rollout.strategy is Canary" }}
    {{- end }}
  {{- else if eq .Values.rollout.strategy "BlueGreen" }}
    {{- if not .Values.ingress.enabled }}
      {{ fail "ingress.enabled must be true if rollout.strategy is BlueGreen" }}
    {{- end }}
    {{- if eq .Values.rollout.controller "ArgoRollout" }}
    blueGreen:
      activeService: {{ include "generic-service.fullname" . }}
      activeMetadata:
        labels:
          role: stable
      previewService: {{ include "generic-service.fullname" . }}-preview
      previewMetadata:
        labels:
          role: preview
      autoPromotionEnabled: {{ .Values.rollout.autoPromotion }}
      {{- if .Values.rollout.analysis }}
      prePromotionAnalysis: {{- .Values.rollout.analysis | toYaml | nindent 8 }}
      {{- end }}
    {{- else if not .Values.rollout.flagger }}
      {{ fail "rollout.flagger must be true or rollout.controller must be ArgoRollout if rollout.strategy is BlueGreen" }}
    {{- end }}
  {{ else }}
    {{ fail "Unknown rollout.strategy" }}
  {{- end }}

  {{- if eq .Values.rollout.controller "StatefulSet" }}
  serviceName: {{ include "generic-service.fullname" . }}

  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "generic-service.fullname" . }}
      spec:
        {{- if .Values.persistence.storageClass }}
        storageClassName: '{{ .Values.persistence.storageClass }}'
        {{- end }}
        accessModes: {{- .Values.persistence.accessModes | toYaml | nindent 10 }}
        resources:
          requests:
            storage: '{{ .Values.persistence.size }}'
  {{- end }}

  {{- end }}

  template:
    metadata:
      labels: {{- include "generic-service.default-labels" . | nindent 8 }}
      {{- if and .Values.ingress.enabled .Values.ingress.domains }}
        allow-from: public
      {{- end }}
      annotations:
        kubectl.kubernetes.io/default-container: {{ include "generic-service.fullname" . }}
      {{- if .Values.ingress.istio.enabled }}
        traffic.sidecar.istio.io/includeInboundPorts: {{ .Values.ingress.port | quote }}
      {{- end }}
      {{- if .Values.tracing.enabled }}
        sidecar.opentelemetry.io/inject: {{ .Values.tracing.class | default "true" | quote }}
        traffic.sidecar.istio.io/excludeOutboundPorts: '5778,9411,14268,14250'  # Jaeger ports
      {{- end }}
      {{- if .Values.config }}
        checksum/config: {{ .Values.config | toJson | sha256sum }}
      {{- end }}
      {{- if .Values.secrets }}
        checksum/secrets: {{ .Values.secrets | toJson | sha256sum }}
      {{- end }}
      {{- if .Values.annotations }}
        {{- .Values.annotations | toYaml | nindent 8 }}
      {{- end }}

    spec:
      enableServiceLinks: false
      securityContext: {{- .Values.securityContext.pod | toYaml | nindent 8 }}
      {{- if .Values.dnsConfig }}
      dnsConfig: {{- .Values.dnsConfig | toYaml | nindent 8 }}
      {{- end }}
      volumes:
        {{- if and .Values.persistence.enabled (ne .Values.rollout.controller "StatefulSet") }}
        - name: persistence
          persistentVolumeClaim:
            claimName: {{ include "generic-service.fullname" . }}
        {{- end }}
        {{- if .Values.config }}
        - name: config
          configMap:
            name: {{ include "generic-service.fullname" . }}
        {{- end }}
        {{- range .Values.additionalConfigs }}
        - name: config-{{ tpl . $ }}
          configMap:
            name: {{ tpl . $ }}
        {{- end }}
        {{- range $name, $_ := .Values.secrets }}
        - name: {{ tpl $name $ }}
          secret:
            secretName: {{ tpl $name $ }}
        {{- end }}
        {{- range $_, $volume := .Values.additionalMounts }}
        - {{ tpl ($volume | toYaml) $ | nindent 10 }}
        {{- end }}

      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}

      {{- if or .Values.rbac.existingServiceAccount (or .Values.rbac.roles .Values.rbac.clusterRoles) }}
      serviceAccountName: '{{ .Values.rbac.existingServiceAccount | default (include "generic-service.fullname" .) }}'
      {{- end }}

      terminationGracePeriodSeconds: {{ .Values.maxShutdownSeconds | int }}

      {{- if .Values.scheduling.priority }}
      priorityClassName: {{ .Values.scheduling.priority }}
      {{- end }}

      {{- if ne .Values.scheduling.replicaSpread "None" }}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: {{ if eq .Values.scheduling.replicaSpread "Strict" }}DoNotSchedule{{ else }}ScheduleAnyway{{ end }}
          labelSelector:
            matchLabels: {{- include "generic-service.selector-labels" . | nindent 14 }}
              {{- if or .Values.version (not (hasPrefix "@" .Values.image.tag)) }}
              # Allow rebalancing during update
              version: {{ .Values.version | default .Values.image.tag | quote }}
              {{- end }}
      {{- end }}

      affinity:
        {{- if .Values.scheduling.podAffinity }}
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                  {{- range $key, $value := .Values.scheduling.podAffinity }}
                    {{ $key }}: {{ tpl $value $ | quote }}
                  {{- end }}
        {{- end }}

        {{- if .Values.scheduling.podAntiAffinity }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: topology.kubernetes.io/zone
              labelSelector:
                matchLabels:
                {{- range $key, $value := .Values.scheduling.podAntiAffinity }}
                  {{ $key }}: {{ tpl $value $ | quote }}
                {{- end }}
        {{- end }}

        {{- if or .Values.scheduling.nodePreferences .Values.scheduling.nodeExclusions }}
        nodeAffinity:
          {{- if .Values.scheduling.nodePreferences }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  {{- range $key, $values := .Values.scheduling.nodePreferences }}
                  - key: {{ $key | quote }}
                    operator: In
                    values: {{- $values | toYaml | nindent 22 }}
                  {{- end }}
          {{- end }}
          {{- if .Values.scheduling.nodeExclusions }}
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                {{- range $key, $values := .Values.scheduling.nodeExclusions }}
                - key: {{ $key | quote }}
                  operator: NotIn
                  values: {{- $values | toYaml | nindent 20 }}
                {{- end }}
          {{- end }}
        {{- end }}

      {{- if .Values.scheduling.nodeSelector }}
      nodeSelector: {{- .Values.scheduling.nodeSelector | toYaml | nindent 8 }}
      {{- end }}

      {{- if .Values.scheduling.tolerations }}
      tolerations:
        {{- range $key:= .Values.scheduling.tolerations }}
        - key: {{ $key | quote }}
          operator: Exists
        {{- end }}
      {{- end }}

      containers:
        - name: {{ include "generic-service.fullname" . }}
          image: '{{ .Values.image.registry }}/{{ .Values.image.repository }}{{ if not (hasPrefix "@" .Values.image.tag) }}:{{ end }}{{ .Values.image.tag }}'
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          {{- if .Values.command }}
          command: {{- .Values.command | toYaml | nindent 12 }}
          {{- end }}

          {{- if .Values.args }}
          args: {{- .Values.args | toYaml | nindent 12 }}
          {{- end }}

          securityContext: {{- .Values.securityContext.container | toYaml | nindent 12 }}

          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: {{ if eq .Values.rollout.controller "StatefulSet" }}{{ include "generic-service.fullname" . }}{{ else }}persistence{{ end }}
              mountPath: {{ required "Must specify persistence.mountPath when persistence.enabled" .Values.persistence.mountPath }}
            {{- end }}
            {{- if .Values.config }}
            - name: config
              subPath: data.yaml
              mountPath: {{ .Values.configMountPath }}
            {{- end }}
            {{- range .Values.additionalConfigs }}
            - name: config-{{ tpl . $ }}
              # Mount entire directory instead of just file to enable hot-reload
              mountPath: '/additional-configs/{{ tpl . $ }}'
            {{- end }}
            {{- range $name, $secret := .Values.secrets }}
            - name: {{ tpl $name $ }}
              {{- if $secret.subPath }}
              subPath: {{ $secret.subPath }}
              {{- end }}
              mountPath: {{ $secret.mountPath }}
            {{- end }}
            {{- range $path, $volume := .Values.additionalMounts }}
            {{- if ne $path "_" }}
            - name: {{ tpl $volume.name $ }}
              mountPath: {{ $path }}
            {{- end }}
            {{- end }}

          ports:
          {{- if .Values.ingress.enabled }}
            - name: '{{ include "generic-service.normalize-protocol" .Values.ingress.protocol }}-ingress'
              containerPort: {{ .Values.ingress.port }}
          {{- end }}
          {{- if (and .Values.monitoring.enabled (or (not .Values.ingress.enabled) (ne .Values.monitoring.port .Values.ingress.port))) }}
            - name: http-monitoring
              containerPort: {{ .Values.monitoring.port }}
          {{- end }}
          {{- $monitoring := .Values.monitoring }}
          {{- range $name, $extra := .Values.ingress.extra }}
            {{- if and $extra.port (or (not $monitoring.enabled) (ne $extra.port $monitoring.port)) }}
            - name: {{ include "generic-service.normalize-protocol" $extra.protocol }}-{{ $name }}
              containerPort: {{ $extra.port }}
            {{- end }}
          {{- end }}

          {{- if .Values.startupProbe }}
          startupProbe: {{- .Values.startupProbe | toYaml | nindent 12 }}
          {{- end }}

          {{- if .Values.livenessProbe }}
          livenessProbe: {{- .Values.livenessProbe | toYaml | nindent 12 }}
          {{- end }}

          {{- if .Values.readinessProbe }}
          readinessProbe: {{- .Values.readinessProbe | toYaml | nindent 12 }}
          {{- end }}

          resources: {{- .Values.resources | toYaml | nindent 12 }}

          env:
            - name: RELEASE_NAME
              value: {{ .Release.Name }}
            - name: POD_CONTROLLER
              value: {{ .Values.rollout.controller }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName

            {{- if not .Values.autoscaling.enabled }}
            - name: REPLICAS
              value: {{ .Values.replicas | quote }}
            {{- end }}

            {{- if .Values.ingress.enabled }}
            - name: PORT
              value: {{ .Values.ingress.port | quote }}
            {{- end }}

            {{- if .Values.monitoring.enabled }}
            - name: METRICS_PORT
              value: {{ .Values.monitoring.port | quote }}
            {{- end }}

            {{- if .Values.tracing.enabled }}
            {{- if .Values.ingress.istio.enabled }}
            - name: OTEL_SERVICE_NAME
              value: '{{ include "generic-service.fullname" . }}.{{ .Release.Namespace }}'
            - name: JAEGER_SERVICE_NAME
              value: '{{ include "generic-service.fullname" . }}.{{ .Release.Namespace }}'
            - name: OTEL_PROPAGATORS
              value: tracecontext,baggage,b3multi
            - name: JAEGER_PROPAGATION
              value: b3
            {{- else }}
            - name: OTEL_SERVICE_NAME
              value: {{ include "generic-service.fullname" . }}
            - name: JAEGER_SERVICE_NAME
              value: {{ include "generic-service.fullname" . }}
            {{- end }}
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: 'service.namespace={{ .Release.Namespace }},service.version={{ .Values.version | default .Values.image.tag }},service.instance.id=$(POD_NAME),k8s.node.name=$(NODE_NAME)'
            {{- if ne (float64 .Values.tracing.probability) 1.0 }}
            - name: OTEL_TRACES_SAMPLER
              value: parentbased_traceidratio
            - name: OTEL_TRACES_SAMPLER_ARG
              value: {{ .Values.tracing.probability | quote }}
            - name: JAEGER_SAMPLER_TYPE
              value: probabilistic
            - name: JAEGER_SAMPLER_PARAM
              value: {{ .Values.tracing.probability | quote }}
            {{- end }}
            {{- end }}

            {{- if or .Values.config .Values.additionalConfigs }}
            - name: CONFIG_FILE
              value: '{{ if .Values.config }}{{ .Values.configMountPath }}{{ end }}{{ range .Values.additionalConfigs }}:/additional-configs/{{ tpl . $ }}/data.yaml{{ end }}'
            {{- end }}

            {{- range $key, $val := .Values.envFrom }}
            - name: {{ $key | quote }}
              valueFrom: {{- $val | toYaml | nindent 16 }}
            {{- end }}

            {{- range $key, $val := .Values.env }}
            - name: {{ $key | quote }}
              {{ if $val }}value: {{ $val | quote }}{{ end }}
            {{- end }}

          {{- if and .Values.ingress.enabled .Values.maxShutdownSeconds | int }}
          # Delay shutdown to give ingress controller time to reroute traffic
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "5"]
          {{- end }}

      {{- range .Values.sidecars }}
        - securityContext: {{- $.Values.securityContext.container | toYaml | nindent 12 }}
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- range .Values.sidecarTemplates }}
      {{- $spec := tpl . $ }}
      {{- if $spec }}
        - securityContext: {{- $.Values.securityContext.container | toYaml | nindent 12 }}
          {{- $spec | nindent 10 }}
      {{- end }}
      {{- end }}

      {{ if or .Values.initContainers .Values.initContainerTemplates }}
      initContainers:
      {{- range .Values.initContainers }}
        - securityContext: {{- $.Values.securityContext.container | toYaml | nindent 12 }}
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- range .Values.initContainerTemplates }}
      {{- $spec := tpl . $ }}
      {{- if $spec }}
        - securityContext: {{- $.Values.securityContext.container | toYaml | nindent 12 }}
          {{- $spec | nindent 10 }}
      {{- end }}
      {{- end }}
      {{- end }}

