name: ''
fullname: ''
version: ''

image:
  registry: docker.io
  # repository: required
  # tag: required
  pullPolicy: IfNotPresent
  pullSecret: ''

securityContext:
  pod:
    seccompProfile:
      type: RuntimeDefault
  container:
    allowPrivilegeEscalation: false
    capabilities:
      drop: [ALL]

command: []

args: []

env: {}
envFrom: {}

config: {}
configMountPath: /config/config.yaml
additionalConfigs: []

dnsConfig: {}

# startupProbe:
#   httpGet:
#     port: http-ingress
#     path: /

# livenessProbe:
#   httpGet:
#     port: http-ingress
#     path: /

# readinessProbe:
#   httpGet:
#     port: http-ingress
#     path: /

maxShutdownSeconds: 30

labels: {}

annotations: {}

resources:
  requests:
    memory: 64Mi
    cpu: 10m
  limits:
    memory: 96Mi
    cpu: 2000m

rollout:
  controller: Deployment
  strategy: RollingUpdate
  autoPromotion: true
  flagger: false
  analysis: null
  revisionHistoryLimit: null

replicas: 1

autoscaling:
  enabled: false
  maxReplicas: 3
  metric:
    type: Resource
    name: cpu
    object:
    selector: {}
  targetValue: 80
  behavior: {}

scheduling:
  priority: ''
  nodeSelector: {}
  nodePreferences: {}
  nodeExclusions: {}
  tolerations: []
  podAffinity: {}
  podAntiAffinity: {}
  replicaSpread: BestEffort

persistence:
  enabled: false
  storageClass: ''
  accessModes: [ReadWriteOnce]
  size: 1G
  mountPath: ''  # required if enabled

secrets: {}

additionalMounts: {}

ingress:
  enabled: false
  port: 80
  protocol: http
  timeoutSeconds: null
  domains: []
  paths: []
  tls:
    enabled: false
    secret: '{{ .Release.Name }}-tls'
    secretNamespace: ''
  cors:
    enabled: false
    allowOrigin: []
    allowMethods: [GET]
    allowHeaders: [Content-Type]
    allowCredentials: true
    exposeHeaders: []
  class: ''
  annotations: {}
  headless: false
  headlessExposesAll: false
  nodeLocal: false
  additionalSelectors: {}
  istio:
    enabled: false
    gateways: []
    httpHeaders: {}
    retries: {}
  extra: {}

netpol:
  enabled: false
  ingress:
    # Allow from same namespace
    - from: [podSelector: {}]
  egress: []

tracing:
  enabled: false
  probability: 1
  class: ''
  insecure: true

monitoring:
  enabled: false
  port: 9100
  path: /metrics
  interval: 1m

alerting:
  enabled: false
  pod:
    maxStartupSeconds: 120
    maxAgeSeconds:
  restarts:
    enabled: true
  memory:
    enabled: true
    maxUsageFactor: 0.9
    quotaBufferFactor: 1.0
  cpu:
    sampleInterval: 1m
    maxThrottleFactor: 0.01
    quotaBufferFactor: 1.0
  http:
    sampleInterval: 20m
    referenceInterval: 1w
    maxSlowdown: 2.5
    max4xxRatio: 2.5
    maxClientCancellationRatio: 2.5
    max5xxCount: 0
    maxTimeoutCount: 0
  grpc:
    requestsMetric: grpc_server_handled_total
    sampleInterval: 20m
    referenceInterval: 1w
    maxErrorRatio: 2.5
    ignoreErrorCodes: []
    maxCriticalErrors: 0
    criticalCodes: [Internal, Unimplemented]
  custom: {}
  logs:
    countInterval: 5m
    levelLabel: level
    levels: {}
    createLokiRule: false
    lokiConfigMap:
      label: "loki_rule"
      labelValue: ""
    custom: {}

initContainers: []
initContainerTemplates: []

sidecars: []
sidecarTemplates: []

rbac:
  roles: []
  clusterRoles: []
  existingServiceAccount: ''

global:
  alertLabels: {}
  grafana:
    url: ''
    dashboard: qqsCbY5Zz
    queryVariables: {}
